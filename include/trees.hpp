#ifndef __TREETOPS_HPP__
#define __TREETOPS_HPP__

#include <string>
#include <map>

namespace geotools {

	namespace trees {

		namespace util {

		/**
			 * A simple class for maintaining information about a tree top.
			 */
			class Top {
			public:
				size_t id;
				double x;
				double y;
				double z;
				int col;
				int row;
				
				Top(size_t id, double x, double y, double z, int col, int row);
				
				Top(const Top &t);
				
				Top();

			};

		}

		class TreeUtil {
		public:
			/**
			 * A convenience method for smoothing the input raster before using it to generate crowns
			 * or treetops.
			 *
			 * inraster   - The raster to be smoothed.
			 * outraster  - The smoothed raster.
			 * sigma      - The standard deviation of the gaussian kernel. Default 0.8408964.
			 * window     - The size of the window to use for smoothing. Default 3.
			 */
			void smooth(const std::string &inraster, const std::string &outraster, double sigma = 0.8408964, double window = 3);

			/**
			 * Locates tree top points on a canopy height model.
			 *
			 * inraster   - The input raster. If the smoothed parameter is given, it is assumed that the input
			 *              raster is not smoothed, and smoothing is performed. Otherwise the raster is used 
			 *              as-is.
			 * topsvect   - The name of a vector file (spatialite) to save the tops to. The table name is "data"
			 *              and the columns are "geom" and "id." Geom is a 3D point and ID is the top's unique ID.
			 * window     - The size of the kernel.
			 * minHeight  - The minimum height of a treetop.
			 * srid       - The SRID of the tops database. Optional (default 0).
			 * tops       - If not null, this vector is populated with objects representing the tree tops.
			 */
			void treetops(const std::string &inraster, const std::string &topsvect, int window, double minHeight, 
				int srid = 0, std::vector<std::unique_ptr<geotools::trees::util::Top> > *tops = nullptr);

			/**
			 * Performs tree crown delineation using a (preferrably smoothed) input raster and a
			 * vector containing tree tops as seeds. Output is an integer raster with cell values
			 * representing tree top IDs, and an optional vector which is the polygonized version
			 * of the raster.
			 *
			 * inraster   - The input raster. Preferrably smoothed (i.e. using smooth()).
			 * tops       - A vector containing tops, generated by treetops().
			 * crownsrast - The raster to write the crowns to (required.)
			 * crownsvect - The vector to write the crowns to (sqlite; required.)
			 * threshold  - A ratio (0 < n < 1) which filters out pixels that are less than a given
			 *		proportion of the tree top's height.
			 * radius     - The maximum radius of an idividual tree crown.
			 * minHeight  - Heights below this value will not be considered.
			 * d8         - Use D8 search rather than D4.
			 */
			/*
			void treecrowns(const std::string &inraster, const std::vector<std::unique_ptr<geotools::trees::util::Top> > &tops, 
				const std::string &crownsrast, const std::string &crownsvect, double threshold, double radius, 
				double minHeight, bool d8 = false);
			*/

			/**
			 * Performs tree crown delineation using a (preferrably smoothed) input raster and a
			 * vector file (sqlite) containing tree tops as seeds. Output is an integer raster with 
			 * cell values* representing tree top IDs, and an optional vector which is the polygonized 
			 * version* of the raster. The table should have been generated using the treetops() method
			 * to ensure that its structure is correct.
			 *
			 * inraster   - The input raster. Preferrably smoothed (i.e. using smooth()).
			 * tops       - A vector containing tops, generated by treetops().
			 * crownsrast - The raster to write the crowns to (required.)
			 * crownsvect - The vector to write the crowns to (sqlite; required.)
			 * threshold  - A ratio (0 < n < 1) which filters out pixels that are less than a given
			 *		proportion of the tree top's height.
			 * radius     - The maximum radius of an idividual tree crown.
			 * minHeight  - Heights below this value will not be considered.
			 * d8         - Use D8 search rather than D4.
			 */
			void treecrowns(const std::string &inraster, const std::string &topsvect, const std::string &crownsrast, 
				const std::string &crownsvect, double threshold, double radius, double minHeight, bool d8 = false);

		};

	} // trees

} // geotools

#endif
